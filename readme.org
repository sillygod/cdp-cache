#+HTML: <a href="https://github.com/sillygod/cdp-cache/actions?query=workflow%3ACI"><img src="https://github.com/sillygod/cdp-cache/workflows/CI/badge.svg?branch=master" /></a>
#+HTML: </div>

#+HTML: <a href="https://www.codacy.com/manual/sillygod/cdp-cache?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=sillygod/cdp-cache&amp;utm_campaign=Badge_Grade"><img src="https://app.codacy.com/project/badge/Grade/43d801ba437a42419e479492eca72ee2" /></a>
#+HTML: </div>


#+HTML: <a href="https://goreportcard.com/report/github.com/sillygod/cdp-cache"><img src="https://goreportcard.com/badge/github.com/sillygod/cdp-cache" /></a>
#+HTML: </div>


* Caddy Http Cache

  This is a http cache plugin for caddy 2. In fact, I am not familiar with the mechanism of the cdn cache so I borrow the code from https://github.com/nicolasazrak/caddy-cache. which is the caddy v1's cache module. Then, I migrate the codebase to be consist with the caddy2 architecture, do some change, and implement more feature for it.

  Currently, this is under development so it will change frequently.

* How to build

  In development, go to the cmd folder and type the following commands.

  #+begin_src sh
    go build -ldflags="-w -s" -o caddy
  #+end_src
  
  To build linux binary by this
  #+begin_src 
  GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o caddy
  #+end_src
  
  Or you can use the [[https://github.com/caddyserver/xcaddy][xcaddy]] to build the executable file.
  Ensure you've install it by =go get -u github.com/caddyserver/xcaddy/cmd/xcaddy=
  #+begin_src sh
    xcaddy build v2.0.0 --with github.com/sillygod/cdp-cache 
  #+end_src
  
  Xcaddy also provide a way to develop plugin locally.
  #+begin_src sh
    xcaddy run --config cmd/Caddyfile
  #+end_src

* How to run

  You can directly run with the binary.
  #+begin_src sh
    caddy run --config [caddy file] --adapter caddyfile
  #+end_src
  
  Or if you are preferred to use the docker 
  #+begin_src sh
    docker run -it -p80:80 -p443:443 -v [the path of caddyfile]:/app/Caddyfile docker.pkg.github.com/sillygod/cdp-cache/caddy:latest
  #+end_src

* Configuration
  
  The following will list current support configs in the caddyfile.

** status_header
   The header to set cache status. default value: =X-Cache-Status=

** match_path
   Only the request's path match the condition will be cached. Ex. =/= means all request need to be cached because all request's path must start with =/=

** default_max_age
   The cache's expiration time.

** match_header
   only the req's header match the condtions 

** path
   The position where to save the file. Only applied when the =cache_type= is =file=.

** cache_key
   The key of cache entry. The default value is ={http.request.method} {http.request.host}{http.request.uri.path}?{http.request.uri.query}=

** cache_bucket_num
   The bucket number of the mod of cache_key's checksum. The default value is 256.

** cache_type
   Indicate to use which kind of cache's storage backend. Currently, there are two choices. One is =file= and the other is =in_memory=
   
** cache_max_memory_size
   The max memory usage for in_memory backend.

* Deployment
  
  In progress, currently I add github action to auto build the executable for linux platform and also the docker images.


* Benchmarks
  
  Now, I just simply compares the performance between in-memory and disk.
  
** Env
   Caddy run with the config file under directory =benchmark= and tests were run on the mac book pro (1.4 GHz Intel Core i5, 16 GB 2133 MHz LPDDR3)

** Test Result

  The following benchmark is analysized by =wrk -c 200 -d 30s --latency -t 4 http://localhost:9992/test.jpg=
  the file size is 100KB
  
  |                         | req/s | latency (50% 90% 99%)        |
  | proxy + file cache      | 10233 | 18.24ms /  22.56ms / 33.34ms |
  | proxy + in memory cache | 15810 | 12.55ms /  14.09ms / 22.88ms |

  
* Todo list
  
  - [x] in memory cache (consider to use [[https://github.com/golang/groupcache][groupcache]])
  - [X] chache control expiration issue default will add 24 hours if no rule applied (in the cacheobject library)
  - [X] research about usagepool in the caddy2 (use global variable instead)
  - [ ] purge cache entries
  - [ ] custom log format (currently only add zap logger to print info)
    Idealy, We can implement a custom log module.
  - [ ] more optimization..
